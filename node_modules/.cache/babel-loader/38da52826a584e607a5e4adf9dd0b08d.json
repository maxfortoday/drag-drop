{"ast":null,"code":"var _jsxFileName = \"/Users/maxim/Downloads/drag-drop/drag-drop/src/components/box/Box.jsx\";\nimport React from 'react';\nimport './Box.css';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nconst Box = ({\n  tasks,\n  linkid,\n  history,\n  match,\n  box: {\n    completedTasks,\n    id\n  },\n  setBox\n}) => {\n  const onDragOver = ev => {\n    ev.preventDefault();\n  };\n\n  const onDrop = (ev, cat) => {\n    let name = ev.dataTransfer.getData(\"id\");\n    tasks.filter(task => {\n      if (task.name === name) {\n        task.category = cat;\n      }\n\n      return task;\n    });\n    setBox(id, name);\n  };\n\n  const completeUrl = () => history.push(`/box${match.url}${linkid}`);\n\n  const boxUrl = history.location.pathname.includes('box');\n  return /*#__PURE__*/React.createElement(\"div\", {\n    linkid: linkid,\n    onClick: boxUrl ? void 0 : completeUrl,\n    className: \"box-container\",\n    onDragOver: e => onDragOver(e),\n    onDrop: e => onDrop(e, \"complete\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 4\n    }\n  }, tasks.map(item => {\n    if (completedTasks.includes(item.name)) {\n      let div = /*#__PURE__*/React.createElement(\"div\", {\n        key: item.name,\n        onDragOver: e => onDragOver(e),\n        onDrop: e => onDrop(e, \"complete\"),\n        className: \"droppable\",\n        style: {\n          backgroundColor: item.bgcolor\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 15\n        }\n      }, item.name);\n      return div;\n    }\n  }));\n};\n\nconst mapStateToProps = state => ({\n  tasks: state.tasks.task\n});\n\nexport default connect(mapStateToProps)(withRouter(Box));","map":{"version":3,"sources":["/Users/maxim/Downloads/drag-drop/drag-drop/src/components/box/Box.jsx"],"names":["React","withRouter","connect","Box","tasks","linkid","history","match","box","completedTasks","id","setBox","onDragOver","ev","preventDefault","onDrop","cat","name","dataTransfer","getData","filter","task","category","completeUrl","push","url","boxUrl","location","pathname","includes","e","map","item","div","backgroundColor","bgcolor","mapStateToProps","state"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;AACA,SAAQC,UAAR,QAAyB,kBAAzB;AACA,SAAQC,OAAR,QAAsB,aAAtB;;AAEA,MAAMC,GAAG,GAAG,CAAC;AAACC,EAAAA,KAAD;AAAOC,EAAAA,MAAP;AAAcC,EAAAA,OAAd;AAAsBC,EAAAA,KAAtB;AAA4BC,EAAAA,GAAG,EAAC;AAACC,IAAAA,cAAD;AAAgBC,IAAAA;AAAhB,GAAhC;AAAoDC,EAAAA;AAApD,CAAD,KAAiE;AAE5E,QAAMC,UAAU,GAAIC,EAAD,IAAQ;AAC1BA,IAAAA,EAAE,CAACC,cAAH;AACA,GAFD;;AAIA,QAAMC,MAAM,GAAG,CAACF,EAAD,EAAKG,GAAL,KAAa;AAC5B,QAAIC,IAAI,GAAGJ,EAAE,CAACK,YAAH,CAAgBC,OAAhB,CAAwB,IAAxB,CAAX;AAEAf,IAAAA,KAAK,CAACgB,MAAN,CAAcC,IAAD,IAAU;AACnB,UAAIA,IAAI,CAACJ,IAAL,KAAcA,IAAlB,EAAwB;AACrBI,QAAAA,IAAI,CAACC,QAAL,GAAgBN,GAAhB;AAEF;;AAED,aAAOK,IAAP;AACH,KAPD;AAQCV,IAAAA,MAAM,CAACD,EAAD,EAAIO,IAAJ,CAAN;AAED,GAbA;;AAeD,QAAMM,WAAW,GAAG,MAAMjB,OAAO,CAACkB,IAAR,CAAc,OAAMjB,KAAK,CAACkB,GAAI,GAAEpB,MAAO,EAAvC,CAA1B;;AACA,QAAMqB,MAAM,GAAGpB,OAAO,CAACqB,QAAR,CAAiBC,QAAjB,CAA0BC,QAA1B,CAAmC,KAAnC,CAAf;AAEE,sBACC;AACA,IAAA,MAAM,EAAExB,MADR;AAEA,IAAA,OAAO,EAAEqB,MAAM,GAAG,KAAK,CAAR,GAAaH,WAF5B;AAGA,IAAA,SAAS,EAAC,eAHV;AAG2B,IAAA,UAAU,EAAGO,CAAD,IAAKlB,UAAU,CAACkB,CAAD,CAHtD;AAIA,IAAA,MAAM,EAAGA,CAAD,IAAKf,MAAM,CAACe,CAAD,EAAI,UAAJ,CAJnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMD1B,KAAK,CAAC2B,GAAN,CAAWC,IAAD,IAAU;AACnB,QAAGvB,cAAc,CAACoB,QAAf,CAAwBG,IAAI,CAACf,IAA7B,CAAH,EAAuC;AACtC,UAAIgB,GAAG,gBAAG;AAAK,QAAA,GAAG,EAAED,IAAI,CAACf,IAAf;AACN,QAAA,UAAU,EAAGa,CAAD,IAAKlB,UAAU,CAACkB,CAAD,CADrB;AAEN,QAAA,MAAM,EAAGA,CAAD,IAAKf,MAAM,CAACe,CAAD,EAAI,UAAJ,CAFb;AAGH,QAAA,SAAS,EAAC,WAHP;AAIH,QAAA,KAAK,EAAI;AAACI,UAAAA,eAAe,EAAEF,IAAI,CAACG;AAAvB,SAJN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAMFH,IAAI,CAACf,IANH,CAAV;AAQG,aAAOgB,GAAP;AACA;AACJ,GAZD,CANC,CADD;AAsBD,CA9CD;;AAgDA,MAAMG,eAAe,GAAGC,KAAK,KAAK;AAC9BjC,EAAAA,KAAK,EAAEiC,KAAK,CAACjC,KAAN,CAAYiB;AADW,CAAL,CAA7B;;AAIA,eAAenB,OAAO,CAACkC,eAAD,CAAP,CAAyBnC,UAAU,CAACE,GAAD,CAAnC,CAAf","sourcesContent":["import React from 'react'\nimport './Box.css';\nimport {withRouter} from 'react-router-dom';\nimport {connect} from 'react-redux';\n\nconst Box = ({tasks,linkid,history,match,box:{completedTasks,id},setBox}) => {\n\n const onDragOver = (ev) => {\n  ev.preventDefault();\n }\n \n const onDrop = (ev, cat) => {\n let name = ev.dataTransfer.getData(\"id\");\n\n tasks.filter((task) => {\n     if (task.name === name) {\n        task.category = cat;\n         \n     }\n     \n     return task;\n }); \n  setBox(id,name)\n \n}\n\nconst completeUrl = () => history.push(`/box${match.url}${linkid}`)\nconst boxUrl = history.location.pathname.includes('box')\n\n  return ( \n   <div \n   linkid={linkid} \n   onClick={boxUrl ? void(0) : completeUrl}    \n   className=\"box-container\"  onDragOver={(e)=>onDragOver(e)}\n   onDrop={(e)=>onDrop(e, \"complete\")}>\n  {\n  tasks.map((item) => { \n   if(completedTasks.includes(item.name)) {\n    let div = <div key={item.name} \n        onDragOver={(e)=>onDragOver(e)}\n        onDrop={(e)=>onDrop(e, \"complete\")}\n           className=\"droppable\"\n           style = {{backgroundColor: item.bgcolor}}\n       >\n           {item.name}\n       </div>\n       return div\n      }\n  })}\n   </div>\n )\n}\n\nconst mapStateToProps = state => ({\n    tasks: state.tasks.task\n  })\n\nexport default connect(mapStateToProps)(withRouter(Box))"]},"metadata":{},"sourceType":"module"}